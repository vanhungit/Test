// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using VMSCore.API.EntityModels.Models;

namespace VMSCore.API.EntityModels.Models
{
    public partial class EntityDataContextCore
    {
        private IEntityDataContextCoreProcedures _procedures;

        public virtual IEntityDataContextCoreProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new EntityDataContextCoreProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IEntityDataContextCoreProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetObjectPermissionByAccountIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetStaffPermissonByStaffIdResult>().HasNoKey().ToView(null);
        }
    }

    public partial class EntityDataContextCoreProcedures : IEntityDataContextCoreProcedures
    {
        private readonly EntityDataContextCore _context;

        public EntityDataContextCoreProcedures(EntityDataContextCore context)
        {
            _context = context;
        }

        public virtual async Task<List<GetObjectPermissionByAccountIdResult>> GetObjectPermissionByAccountIdAsync(Guid? AccountId, string typeId, int? type, string moduleType, string groupType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccountId",
                    Value = AccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "typeId",
                    Size = 100,
                    Value = typeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleType",
                    Size = 100,
                    Value = moduleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "groupType",
                    Size = 100,
                    Value = groupType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetObjectPermissionByAccountIdResult>("EXEC @returnValue = [dbo].[GetObjectPermissionByAccountId] @AccountId, @typeId, @type, @moduleType, @groupType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetStaffPermissonByStaffIdResult>> GetStaffPermissonByStaffIdAsync(string staffId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "staffId",
                    Size = 100,
                    Value = staffId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetStaffPermissonByStaffIdResult>("EXEC @returnValue = [dbo].[GetStaffPermissonByStaffId] @staffId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
